//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechStore
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;

    /// <summary>
    /// Klasa Dostupnost.
    /// </summary>
    public partial class Dostupnost
    {
        public int ID { get; set; }
        public int Artikl_ID { get; set; }
        public int Poslovnica_ID { get; set; }
        public int Kolicina { get; set; }
    
        public virtual Artikl Artikl { get; set; }
        public virtual Poslovnica Poslovnica { get; set; }

        /// <summary>
        /// Dohvaæa sve dostupnosti artikla na temelju proslijeðenog parametra.
        /// </summary>
        /// <param name="idArtikla">ID artikla za kojeg se dohvaæa dostupnost.</param>
        /// <returns>Listu dostupnosti.</returns>
        public static List<Dostupnost> DohvatiDostupnost(int idArtikla)
        {
            List<Dostupnost> dostupnost = null;

            using (TechStoreEntities db = new TechStoreEntities())
            {
                dostupnost = (from d in db.Dostupnost where d.Artikl_ID == idArtikla select d).ToList();
            }

            return dostupnost;
        }

        /// <summary>
        /// Statièka metoda koja prima kao parametar novu dostupnost.
        /// </summary>
        /// <param name="novaDostupnost"></param>
        public static void DodajDostupnost(Dostupnost novaDostupnost) {
            using (var db= new TechStoreEntities())
            {
                db.Dostupnost.Add(novaDostupnost);
                db.SaveChanges();
            }
        }

        /// <summary>
        /// Statièka metoda koja kao argumente prima novu dostupnost i kolièinu
        /// </summary>
        /// <param name="izmjenaDostupnosti"> Objekt tipa Dostupnost</param>
        /// <param name="kolicina">Nova kolièina artikla</param>
        public static void IzmjenaDostupnosti(Dostupnost izmjenaDostupnosti,int kolicina)
        {
            using (var db= new TechStoreEntities())
            {
                db.Dostupnost.Attach(izmjenaDostupnosti);
                izmjenaDostupnosti.Kolicina += kolicina;
                db.SaveChanges();
            }
        }

        /// <summary>
        /// Statièka metoda koja kao argumente prima poslovnicu i ID artikla.
        /// </summary>
        /// <param name="poslovnica">Poslovnica</param>
        /// <param name="artiklId">ArtiklId</param>
        /// <returns></returns>
        public static Dostupnost DohvatiDostupnost(Poslovnica poslovnica, int artiklId)
        {
            Dostupnost dostupnost = null;
            using (var db= new TechStoreEntities())
            {
                dostupnost = (from d in db.Dostupnost where d.Artikl_ID == artiklId && d.Poslovnica_ID == poslovnica.ID select d).FirstOrDefault();
            }
            return dostupnost;
        }
    }
}
