//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechStore
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;

    /// <summary>
    /// Klasa Poslovnica.
    /// </summary>
    public partial class Poslovnica
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Poslovnica()
        {
            this.Dostupnost = new HashSet<Dostupnost>();
            this.Zaposlenik = new HashSet<Zaposlenik>();
        }
    
        public int ID { get; set; }
        public string Naziv { get; set; }
        public string Drzava { get; set; }
        public string Grad { get; set; }
        public string Ulica { get; set; }
        public string Broj { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Dostupnost> Dostupnost { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Zaposlenik> Zaposlenik { get; set; }

        /// <summary>
        /// Metoda koja dohvaæa sve poslovnice iz baze.
        /// </summary>
        /// <returns>Vraæa listu sa svim poslovnicama.</returns>
        public static BindingList<Poslovnica> DohvatiPoslovnice()
        {
            BindingList<Poslovnica> poslovnice = null;
            using (TechStoreEntities db = new TechStoreEntities())
            {
                poslovnice = new BindingList<Poslovnica>(db.Poslovnica.ToList());
            }

            return poslovnice;
        }

        /// <summary>
        /// Dohvaæa jednu poslovnicu na temelju proslijeðenog parametra.
        /// </summary>
        /// <param name="idPoslovnice">ID poslovnice koja se dohvaæa iz baze.</param>
        /// <returns>Ukoliko poslovnica s traženim ID-om postoji, vraæa poslovnicu, inaèe null.</returns>
        public static Poslovnica DohvatiPoslovnicu(int idPoslovnice)
        {
            Poslovnica poslovnica = null;
            using (TechStoreEntities db = new TechStoreEntities())
            {
                poslovnica = (from p in db.Poslovnica where p.ID == idPoslovnice select p).FirstOrDefault();
            }

            return poslovnica;
        }

        /// <summary>
        /// Statièka metoda koja dodaje proslijeðenu poslovnicu u bazu i sprema
        /// napravljene promjene u bazu podataka.
        /// </summary>
        /// <param name="poslovnica">Poslovnica koja se dodaje u bazu podataka.</param>
        public static void DodajPoslovnicu(Poslovnica poslovnica)
        {
            using (TechStoreEntities db = new TechStoreEntities())
            {
                db.Poslovnica.Add(poslovnica);
                db.SaveChanges();
            }
        }
    }
}
